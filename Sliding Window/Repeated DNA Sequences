"""
Given a string, s, that represents a DNA subsequence, and a number k , return all the contiguous subsequences (substrings)
of length  k that occur more than once in the string. The order of the returned subsequences does not matter. If no repeated 
substring is found, the function should return an empty set. 
The DNA sequence is composed of a series of nucleotides abbreviated as A, C, G and T

"""

def find_repeated_sequences(s, k):

    # Replace this placeholder return statement with your code
    len_dna = len(s)
    mapping = {'A':1, 'C':2, 'G':3, 'T':4}
    mapping_val_list = [0]*len_dna

    if len_dna<=k:
        return output

    # Base value
    x = 4

    # Converting DNA sequence to an array of digits based on the mapping values so that we could perform a rolling hash.
    for index in range(len_dna):
        mapping_val_list[index] = mapping.get(s[index])
    
    # Output set to store the repeated substrings
    output = set()
    # Hash set to store the unique hash values
    hash_values = set()

    prev_hash_val = 0
    # Using rolling hash to generate hash of first k characters in a window
    for index in range(k):
        prev_hash_val += mapping_val_list[index]*x**(k-index-1)
    hash_values.add(prev_hash_val)
    """Using rolling hash to generate  hash of current k character in a window.
    If hash already in a set of hash values, add the current window of characters in an output set."""
    for index in range(1, len_dna-k+1):
        prev_hash_val = (prev_hash_val-mapping_val_list[index-1]*x**(k-1))*x+mapping_val_list[index+k-1]
        if prev_hash_val in hash_values:
            output.add(s[index:index+k])
        else:
            hash_values.add(prev_hash_val)   
    return output

print(find_repeated_sequences("AAAAACCCCCAAAAACCCCCC" , 8))