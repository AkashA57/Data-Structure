"""
Given a string, s, that represents a DNA subsequence, and a number k , return all the contiguous subsequences (substrings)
of length  k that occur more than once in the string. The order of the returned subsequences does not matter. If no repeated 
substring is found, the function should return an empty set.
"""

def find_repeated_sequences(s, k):

    # Replace this placeholder return statement with your code
    len_dna = len(s)
    mapping = {'A':1, 'C':2, 'G':3, 'T':4}
    mapping_val_list = [0]*len_dna
    for index in range(len_dna):
        mapping_val_list[index] = mapping.get(s[index])
    
    output = set()
    if len_dna<=k:
        return output
    
    prev_hash_val = 0
    hash_values = set()

    for index in range(k):
        prev_hash_val += mapping_val_list[index]*4**(k-index-1)
    hash_values.add(prev_hash_val)

    print(mapping_val_list)
    print(prev_hash_val)

    for index in range(1, len_dna-k+1):
        prev_hash_val = (prev_hash_val-mapping_val_list[index-1]*4**(k-1))*4+mapping_val_list[index+k-1]
        if prev_hash_val in hash_values:
            output.add(s[index:index+k])
        else:
            hash_values.add(prev_hash_val)   
    return output

find_repeated_sequences("AAAAACCCCCAAAAACCCCCC" , 8)